using System;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Windows.Forms;
using PS3Lib;

namespace RealAntiFreeze_By_BISOON
{
    public partial class mainForm : Form
    {
        static PS3API PS3 = new PS3API();
        public mainForm()
        {
            InitializeComponent();
        }

        void AntiFreeze(bool bolean)
        {
            if (bolean)
            {
                PS3.SetMemory(0x67B760 , new byte[] { 0x93, 0xFE, 0x00, 0x00, 0x38, 0x60, 0x00, 0x60, 0x48, 0x00, 0x01, 0x08, 0x2C, 0x05, 0x00, 0x48, 0x41, 0x82, 0x00, 0x0C, 0x2C, 0x05, 0x00, 0x49, 0x40, 0x82, 0x00, 0xB4, 0x8B, 0x39, 0x00, 0x03, 0x32, 0xE1, 0x00, 0x80, 0x30, 0x83, 0x00, 0x05, 0x7F, 0x39, 0x07, 0x74, 0x62, 0xE3, 0x00, 0x00, 0x78, 0x84, 0x00, 0x20, 0x7B, 0x25, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x7C, 0x61, 0xC8, 0x14, 0x3A, 0xC0, 0x00, 0x00, 0x78, 0x67, 0x00, 0x20, 0x38, 0x80, 0x00, 0x07, 0x38, 0xA0, 0x00, 0x01, 0x62, 0xE3, 0x00, 0x00, 0x38, 0xC0, 0xFF, 0xFF, 0x9A, 0xC7, 0x00, 0x80, 0x48, 0x0E, 0x7A, 0x65, 0x80, 0xBF, 0x00, 0x00, 0x62, 0xC4, 0x00, 0x00, 0x78, 0xA6, 0x00, 0x20, 0x2C, 0x84, 0x00, 0x03, 0x88, 0xC6, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x5E, 0x4C, 0x42, 0x23, 0x42, 0x41, 0x82, 0x00, 0x20, 0x7C, 0xD8, 0x21, 0xAE, 0x30, 0xE4, 0x00, 0x01, 0x80, 0xBF, 0x00, 0x00, 0x7C, 0xE4, 0x07, 0xB4, 0x30, 0xA5, 0x00, 0x01, 0x90, 0xBF, 0x00, 0x00, 0x4B, 0xFF, 0xFF, 0xD0, 0x30, 0xD9, 0x60, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x7C, 0xA5, 0x30, 0x14, 0x2C, 0x1B, 0x00, 0x00, 0x90, 0xBF, 0x00, 0x00, 0x7C, 0xF8, 0x21, 0xAE, 0x41, 0x82, 0x00, 0x18, 0x60, 0x64, 0x00, 0x00, 0x93, 0x1B, 0x00, 0x00, 0x38, 0x60, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x80, 0x9F, 0x00, 0x00, 0x30, 0x84, 0x60, 0x00, 0x90, 0x9F, 0x00, 0x00, 0x48, 0x00, 0x00, 0x24, 0x63, 0xE3, 0x00, 0x00 });
            }
            else
            {
                PS3.SetMemory(0x67B760, new byte[] { 0x93, 0xFE, 0x00, 0x00, 0x38, 0x60, 0x00, 0x01, 0x48, 0x00, 0x01, 0x08, 0x2C, 0x05, 0x00, 0x48, 0x41, 0x82, 0x00, 0x0C, 0x2C, 0x05, 0x00, 0x49, 0x40, 0x82, 0x00, 0xB4, 0x8B, 0x39, 0x00, 0x03, 0x32, 0xE1, 0x00, 0x80, 0x30, 0x83, 0x00, 0x05, 0x7F, 0x39, 0x07, 0x74, 0x62, 0xE3, 0x00, 0x00, 0x78, 0x84, 0x00, 0x20, 0x7B, 0x25, 0x00, 0x20, 0x48,  0x1C, 0x6E, 0x19, 0x7C, 0x61, 0xC8, 0x14, 0x3A, 0xC0, 0x00, 0x00, 0x78, 0x67, 0x00, 0x20, 0x38, 0x80, 0x00, 0x07, 0x38, 0xA0, 0x00, 0x01, 0x62, 0xE3, 0x00, 0x00, 0x38, 0xC0, 0xFF, 0xFF, 0x9A, 0xC7, 0x00, 0x80, 0x48, 0x0E, 0x7A, 0x65, 0x80, 0xBF, 0x00, 0x00, 0x62, 0xC4, 0x00, 0x00, 0x78, 0xA6, 0x00, 0x20, 0x2C, 0x84, 0x00, 0x03, 0x88, 0xC6, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x5E, 0x4C, 0x42, 0x23, 0x42, 0x41, 0x82, 0x00, 0x20, 0x7C, 0xD8, 0x21, 0xAE, 0x30, 0xE4, 0x00, 0x01, 0x80, 0xBF, 0x00, 0x00, 0x7C, 0xE4, 0x07, 0xB4, 0x30, 0xA5, 0x00, 0x01, 0x90, 0xBF, 0x00, 0x00, 0x4B, 0xFF, 0xFF, 0xD0, 0x30, 0xD9, 0x00, 0x01, 0x38, 0xE0, 0x00, 0x00, 0x7C, 0xA5, 0x30, 0x14, 0x2C, 0x1B, 0x00, 0x00, 0x90, 0xBF, 0x00, 0x00, 0x7C, 0xF8, 0x21, 0xAE, 0x41, 0x82, 0x00, 0x18, 0x60, 0x64, 0x00, 0x00, 0x93, 0x1B, 0x00, 0x00, 0x38, 0x60, 0x00, 0x01, 0x90, 0x9A, 0x00, 0x00, 0x48, 0x00, 0x00, 0x48, 0x80, 0x9F, 0x00, 0x00, 0x30, 0x84, 0x00, 0x01, 0x90, 0x9F, 0x00, 0x00, 0x48, 0x00, 0x00, 0x24, 0x63, 0xE3, 0x00, 0x00 });
            }
        }
        void NewThread(Action act)
        {
            new Thread ((ThreadStart)(() => act()))
            {
                Name = act.Method.Name
            }.Start();
        }
        public static string GetPlayerName(int Client)
        {
            return PS3.Extension.ReadString(0x178646C + 0x5808 * (uint)Client);
        }
        int? ReturnHost()
        {
            int? host = null;
            string localName = PS3.Extension.ReadString(0x26C067F);
            for (int i = 0; i < 19; i++)
            {
                if (GetPlayerName(i) == localName)
                    host = i;
            }
            return host;
        }
        bool ClientInGame()
        {
            return PS3.Extension.ReadBool(0x1CB68E8);
        }
        string GetClientName(int Client)
        {
            string str = PS3.Extension.ReadString(0x36524C14 + 0x4E180 * (uint)Client);
            return str;
        }

        void SetClientName(int Client)
        {
            string clientName = GetClientName(Client).Replace("^", "");
            PS3.Extension.WriteString(0x36524C14 + 0x4E180 * (uint)Client, clientName);
            PS3.Extension.WriteString(0x0178646c + 0x5808 * (uint)Client, clientName);
        }
        string GetClientClan(int Client)
        {
            return PS3.Extension.ReadString((0x0178646c + 0x6C) + 0x5808 * (uint)Client);
        }
        void SetClientClan(int Client)
        {
            string clientClan = GetClientClan(Client).Replace("^", "");
            PS3.Extension.WriteString((0x36524C14 + 0x20) + 0x4E180 * (uint)Client, clientClan);
            PS3.Extension.WriteString((0x0178646c + 0x6C) + 0x5808 * (uint)Client, clientClan);
        }
        bool status = false;
        void RunAntiFreeze(bool bolean)
        {

            status = bolean;
            PS3.InitTarget();
            while (status == true)
            {
                if (ClientInGame())
                {
                    if (ReturnHost() != null)
                    {
                        AntiFreeze(false);
                        for (int i = 0; i < 12; i++)
                        {
                            if (GetClientName(i).Contains('^'))
                            {
                                SetClientName(i);
                            }

                            if (GetClientClan(i).Contains('^'))
                            {
                                SetClientClan(i);
                            }
                        }
                    }
                    else
                    {
                        AntiFreeze(true);
                    }
                }
                else
                {
                    AntiFreeze(true);
                }
            }
            AntiFreeze(false);
        }


        private void mainForm_Load(object sender, EventArgs e)
        {
            //echo Hi :)
        }

        private void conBtn_Click(object sender, EventArgs e)
        {
            try
            {
                if (conBtn.Text == "Connect / Attach")
                {
                    if (cexCh.Checked)
                        PS3.ChangeAPI(SelectAPI.ControlConsole);
                    else
                        PS3.ChangeAPI(SelectAPI.TargetManager);
                    if (PS3.ConnectTarget() && PS3.AttachProcess())
                    {
                        MessageBox.Show("Connected / Attached", "Connection", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        conBtn.Text = "Disconnect";
                    }
                    else
                    {
                        MessageBox.Show("Error cannot Connect", "Connection", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else if (conBtn.Text == "Disconnect")
                {
                    RunAntiFreeze(false);
                    PS3.DisconnectTarget();
                    conBtn.Text = "Connect / Attach";
                    runAntiBtn.Text = "Run AntiFreeze";
                    runAntiBtn.Refresh();
                }
            }
            catch
            {
                MessageBox.Show("Error cannot Connect", "Connection", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void runAntiBtn_Click(object sender, EventArgs e)
        {
            if (runAntiBtn.Text == "Run AntiFreeze")
            {
                NewThread(new Action(() => RunAntiFreeze(true)));
                runAntiBtn.Text = "Stop AntiFreeze";
                lblInfo.Text = "AntiFreeze  [ On ]";
                return;
            }
            RunAntiFreeze(false);
            runAntiBtn.Text = "Run AntiFreeze";
            lblInfo.Text = "AntiFreeze  [ Off ]";
            AntiFreeze(false);
        }

        private void closeBtn_Click(object sender, EventArgs e)
        {
           Process.GetCurrentProcess().Kill();
        }

        private void websitEvent(object sender, EventArgs e)
        {
            Process.Start("http://arabmodding.com/ar/");
        }

        private void byBisBtn_Click(object sender, EventArgs e)
        {
            Process.Start("http://www.youtube.com/c/bisoon");
        }
    }
}
